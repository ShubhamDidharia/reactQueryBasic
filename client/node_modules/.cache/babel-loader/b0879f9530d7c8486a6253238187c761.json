{"ast":null,"code":"// src/thenable.ts\nfunction pendingThenable() {\n  let resolve;\n  let reject;\n  const thenable = new Promise((_resolve, _reject) => {\n    resolve = _resolve;\n    reject = _reject;\n  });\n  thenable.status = \"pending\";\n  thenable.catch(() => {});\n\n  function finalize(data) {\n    Object.assign(thenable, data);\n    delete thenable.resolve;\n    delete thenable.reject;\n  }\n\n  thenable.resolve = value => {\n    finalize({\n      status: \"fulfilled\",\n      value\n    });\n    resolve(value);\n  };\n\n  thenable.reject = reason => {\n    finalize({\n      status: \"rejected\",\n      reason\n    });\n    reject(reason);\n  };\n\n  return thenable;\n}\n\nexport { pendingThenable };","map":{"version":3,"mappings":";AAyCO,SAASA,eAAT,GAAkD;EACvD,IAAIC,OAAJ;EACA,IAAIC,MAAJ;EAEA,MAAMC,WAAW,IAAIC,OAAJ,CAAY,CAACC,QAAD,EAAWC,OAAX,KAAuB;IAClDL,UAAUI,QAAV;IACAH,SAASI,OAAT;EACD,CAHgB,CAAjB;EAKAH,SAASI,MAAT,GAAkB,SAAlB;EACAJ,SAASK,KAAT,CAAe,MAAM,CAEpB,CAFD;;EAIA,SAASC,QAAT,CAAkBC,IAAlB,EAAiD;IAC/CC,OAAOC,MAAP,CAAcT,QAAd,EAAwBO,IAAxB;IAGA,OAAQP,SAAyCF,OAAjD;IACA,OAAQE,SAAyCD,MAAjD;EACF;;EAEAC,SAASF,OAAT,GAAoBY,KAAD,IAAW;IAC5BJ,SAAS;MACPF,QAAQ,WADD;MAEPM;IAFO,CAAT;IAKAZ,QAAQY,KAAR;EACF,CAPA;;EAQAV,SAASD,MAAT,GAAmBY,MAAD,IAAY;IAC5BL,SAAS;MACPF,QAAQ,UADD;MAEPO;IAFO,CAAT;IAKAZ,OAAOY,MAAP;EACF,CAPA;;EASA,OAAOX,QAAP;AACF","names":["pendingThenable","resolve","reject","thenable","Promise","_resolve","_reject","status","catch","finalize","data","Object","assign","value","reason"],"sources":["C:\\Users\\MOON\\Downloads\\Starter Template\\client\\node_modules\\@tanstack\\query-core\\src\\thenable.ts"],"sourcesContent":["/**\n * Thenable types which matches React's types for promises\n *\n * React seemingly uses `.status`, `.value` and `.reason` properties on a promises to optimistically unwrap data from promises\n *\n * @see https://github.com/facebook/react/blob/main/packages/shared/ReactTypes.js#L112-L138\n * @see https://github.com/facebook/react/blob/4f604941569d2e8947ce1460a0b2997e835f37b9/packages/react-debug-tools/src/ReactDebugHooks.js#L224-L227\n */\n\ninterface Fulfilled<T> {\n  status: 'fulfilled'\n  value: T\n}\ninterface Rejected {\n  status: 'rejected'\n  reason: unknown\n}\ninterface Pending<T> {\n  status: 'pending'\n\n  /**\n   * Resolve the promise with a value.\n   * Will remove the `resolve` and `reject` properties from the promise.\n   */\n  resolve: (value: T) => void\n  /**\n   * Reject the promise with a reason.\n   * Will remove the `resolve` and `reject` properties from the promise.\n   */\n  reject: (reason: unknown) => void\n}\n\nexport type FulfilledThenable<T> = Promise<T> & Fulfilled<T>\nexport type RejectedThenable<T> = Promise<T> & Rejected\nexport type PendingThenable<T> = Promise<T> & Pending<T>\n\nexport type Thenable<T> =\n  | FulfilledThenable<T>\n  | RejectedThenable<T>\n  | PendingThenable<T>\n\nexport function pendingThenable<T>(): PendingThenable<T> {\n  let resolve: Pending<T>['resolve']\n  let reject: Pending<T>['reject']\n  // this could use `Promise.withResolvers()` in the future\n  const thenable = new Promise((_resolve, _reject) => {\n    resolve = _resolve\n    reject = _reject\n  }) as PendingThenable<T>\n\n  thenable.status = 'pending'\n  thenable.catch(() => {\n    // prevent unhandled rejection errors\n  })\n\n  function finalize(data: Fulfilled<T> | Rejected) {\n    Object.assign(thenable, data)\n\n    // clear pending props props to avoid calling them twice\n    delete (thenable as Partial<PendingThenable<T>>).resolve\n    delete (thenable as Partial<PendingThenable<T>>).reject\n  }\n\n  thenable.resolve = (value) => {\n    finalize({\n      status: 'fulfilled',\n      value,\n    })\n\n    resolve(value)\n  }\n  thenable.reject = (reason) => {\n    finalize({\n      status: 'rejected',\n      reason,\n    })\n\n    reject(reason)\n  }\n\n  return thenable\n}\n"]},"metadata":{},"sourceType":"module"}