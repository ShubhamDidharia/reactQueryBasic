{"ast":null,"code":"\"use client\"; // src/ReactQueryDevtoolsPanel.tsx\n\nimport * as React from \"react\";\nimport { onlineManager, useQueryClient } from \"@tanstack/react-query\";\nimport { TanstackQueryDevtoolsPanel } from \"@tanstack/query-devtools\";\nimport { jsx } from \"react/jsx-runtime\";\n\nfunction ReactQueryDevtoolsPanel(props) {\n  const queryClient = useQueryClient(props.client);\n  const ref = React.useRef(null);\n  const {\n    errorTypes,\n    styleNonce,\n    shadowDOMTarget\n  } = props;\n  const [devtools] = React.useState(new TanstackQueryDevtoolsPanel({\n    client: queryClient,\n    queryFlavor: \"React Query\",\n    version: \"5\",\n    onlineManager,\n    buttonPosition: \"bottom-left\",\n    position: \"bottom\",\n    initialIsOpen: true,\n    errorTypes,\n    styleNonce,\n    shadowDOMTarget,\n    onClose: props.onClose\n  }));\n  React.useEffect(() => {\n    devtools.setClient(queryClient);\n  }, [queryClient, devtools]);\n  React.useEffect(() => {\n    devtools.setOnClose(props.onClose ?? (() => {}));\n  }, [props.onClose, devtools]);\n  React.useEffect(() => {\n    devtools.setErrorTypes(errorTypes || []);\n  }, [errorTypes, devtools]);\n  React.useEffect(() => {\n    if (ref.current) {\n      devtools.mount(ref.current);\n    }\n\n    return () => {\n      devtools.unmount();\n    };\n  }, [devtools]);\n  return /* @__PURE__ */jsx(\"div\", {\n    style: {\n      height: \"500px\",\n      ...props.style\n    },\n    className: \"tsqd-parent-container\",\n    ref\n  });\n}\n\nexport { ReactQueryDevtoolsPanel };","map":{"version":3,"mappings":";;AACA,YAAYA,KAAZ,MAAuB,OAAvB;AACA,SAASC,aAAT,EAAwBC,cAAxB,QAA8C,uBAA9C;AACA,SAASC,0BAAT,QAA2C,0BAA3C;AAiFI;;AA7CG,SAASC,uBAAT,CACLC,KADK,EAEsB;EAC3B,MAAMC,cAAcJ,eAAeG,MAAME,MAArB,CAApB;EACA,MAAMC,MAAYR,aAAuB,IAAvB,CAAlB;EACA,MAAM;IAAES,UAAF;IAAcC,UAAd;IAA0BC;EAA1B,IAA8CN,KAApD;EACA,MAAM,CAACO,QAAD,IAAmBZ,eACvB,IAAIG,0BAAJ,CAA+B;IAC7BI,QAAQD,WADqB;IAE7BO,aAAa,aAFgB;IAG7BC,SAAS,GAHoB;IAI7Bb,aAJ6B;IAK7Bc,gBAAgB,aALa;IAM7BC,UAAU,QANmB;IAO7BC,eAAe,IAPc;IAQ7BR,UAR6B;IAS7BC,UAT6B;IAU7BC,eAV6B;IAW7BO,SAASb,MAAMa;EAXc,CAA/B,CADuB,CAAzB;EAgBMlB,gBAAU,MAAM;IACpBY,SAASO,SAAT,CAAmBb,WAAnB;EACF,CAFM,EAEH,CAACA,WAAD,EAAcM,QAAd,CAFG;EAIAZ,gBAAU,MAAM;IACpBY,SAASQ,UAAT,CAAoBf,MAAMa,OAAN,KAAkB,MAAM,CAAC,CAAzB,CAApB;EACF,CAFM,EAEH,CAACb,MAAMa,OAAP,EAAgBN,QAAhB,CAFG;EAIAZ,gBAAU,MAAM;IACpBY,SAASS,aAAT,CAAuBZ,cAAc,EAArC;EACF,CAFM,EAEH,CAACA,UAAD,EAAaG,QAAb,CAFG;EAIAZ,gBAAU,MAAM;IACpB,IAAIQ,IAAIc,OAAR,EAAiB;MACfV,SAASW,KAAT,CAAef,IAAIc,OAAnB;IACF;;IAEA,OAAO,MAAM;MACXV,SAASY,OAAT;IACF,CAFA;EAGF,CARM,EAQH,CAACZ,QAAD,CARG;EAUN,OACE,mBAAC,KAAD,EAAC;IACCa,OAAO;MAAEC,QAAQ,OAAV;MAAmB,GAAGrB,MAAMoB;IAA5B,CADR;IAECE,WAAU,uBAFX;IAGCnB;EAHD,CAAD,CADF;AAOF","names":["React","onlineManager","useQueryClient","TanstackQueryDevtoolsPanel","ReactQueryDevtoolsPanel","props","queryClient","client","ref","errorTypes","styleNonce","shadowDOMTarget","devtools","queryFlavor","version","buttonPosition","position","initialIsOpen","onClose","setClient","setOnClose","setErrorTypes","current","mount","unmount","style","height","className"],"sources":["C:\\Users\\MOON\\Downloads\\Starter Template\\client\\node_modules\\@tanstack\\react-query-devtools\\src\\ReactQueryDevtoolsPanel.tsx"],"sourcesContent":["'use client'\nimport * as React from 'react'\nimport { onlineManager, useQueryClient } from '@tanstack/react-query'\nimport { TanstackQueryDevtoolsPanel } from '@tanstack/query-devtools'\nimport type { DevtoolsErrorType } from '@tanstack/query-devtools'\nimport type { QueryClient } from '@tanstack/react-query'\n\nexport interface DevtoolsPanelOptions {\n  /**\n   * Custom instance of QueryClient\n   */\n  client?: QueryClient\n  /**\n   * Use this so you can define custom errors that can be shown in the devtools.\n   */\n  errorTypes?: Array<DevtoolsErrorType>\n  /**\n   * Use this to pass a nonce to the style tag that is added to the document head. This is useful if you are using a Content Security Policy (CSP) nonce to allow inline styles.\n   */\n  styleNonce?: string\n  /**\n   * Use this so you can attach the devtool's styles to specific element in the DOM.\n   */\n  shadowDOMTarget?: ShadowRoot\n\n  /**\n   * Custom styles for the devtools panel\n   * @default { height: '500px' }\n   * @example { height: '100%' }\n   * @example { height: '100%', width: '100%' }\n   */\n  style?: React.CSSProperties\n\n  /**\n   * Callback function that is called when the devtools panel is closed\n   */\n  onClose?: () => unknown\n}\n\nexport function ReactQueryDevtoolsPanel(\n  props: DevtoolsPanelOptions,\n): React.ReactElement | null {\n  const queryClient = useQueryClient(props.client)\n  const ref = React.useRef<HTMLDivElement>(null)\n  const { errorTypes, styleNonce, shadowDOMTarget } = props\n  const [devtools] = React.useState(\n    new TanstackQueryDevtoolsPanel({\n      client: queryClient,\n      queryFlavor: 'React Query',\n      version: '5',\n      onlineManager,\n      buttonPosition: 'bottom-left',\n      position: 'bottom',\n      initialIsOpen: true,\n      errorTypes,\n      styleNonce,\n      shadowDOMTarget,\n      onClose: props.onClose,\n    }),\n  )\n\n  React.useEffect(() => {\n    devtools.setClient(queryClient)\n  }, [queryClient, devtools])\n\n  React.useEffect(() => {\n    devtools.setOnClose(props.onClose ?? (() => {}))\n  }, [props.onClose, devtools])\n\n  React.useEffect(() => {\n    devtools.setErrorTypes(errorTypes || [])\n  }, [errorTypes, devtools])\n\n  React.useEffect(() => {\n    if (ref.current) {\n      devtools.mount(ref.current)\n    }\n\n    return () => {\n      devtools.unmount()\n    }\n  }, [devtools])\n\n  return (\n    <div\n      style={{ height: '500px', ...props.style }}\n      className=\"tsqd-parent-container\"\n      ref={ref}\n    ></div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}