{"ast":null,"code":"\"use client\"; // src/ReactQueryDevtools.tsx\n\nimport * as React from \"react\";\nimport { onlineManager, useQueryClient } from \"@tanstack/react-query\";\nimport { TanstackQueryDevtools } from \"@tanstack/query-devtools\";\nimport { jsx } from \"react/jsx-runtime\";\n\nfunction ReactQueryDevtools(props) {\n  const queryClient = useQueryClient(props.client);\n  const ref = React.useRef(null);\n  const {\n    buttonPosition,\n    position,\n    initialIsOpen,\n    errorTypes,\n    styleNonce,\n    shadowDOMTarget\n  } = props;\n  const [devtools] = React.useState(new TanstackQueryDevtools({\n    client: queryClient,\n    queryFlavor: \"React Query\",\n    version: \"5\",\n    onlineManager,\n    buttonPosition,\n    position,\n    initialIsOpen,\n    errorTypes,\n    styleNonce,\n    shadowDOMTarget\n  }));\n  React.useEffect(() => {\n    devtools.setClient(queryClient);\n  }, [queryClient, devtools]);\n  React.useEffect(() => {\n    if (buttonPosition) {\n      devtools.setButtonPosition(buttonPosition);\n    }\n  }, [buttonPosition, devtools]);\n  React.useEffect(() => {\n    if (position) {\n      devtools.setPosition(position);\n    }\n  }, [position, devtools]);\n  React.useEffect(() => {\n    devtools.setInitialIsOpen(initialIsOpen || false);\n  }, [initialIsOpen, devtools]);\n  React.useEffect(() => {\n    devtools.setErrorTypes(errorTypes || []);\n  }, [errorTypes, devtools]);\n  React.useEffect(() => {\n    if (ref.current) {\n      devtools.mount(ref.current);\n    }\n\n    return () => {\n      devtools.unmount();\n    };\n  }, [devtools]);\n  return /* @__PURE__ */jsx(\"div\", {\n    dir: \"ltr\",\n    className: \"tsqd-parent-container\",\n    ref\n  });\n}\n\nexport { ReactQueryDevtools };","map":{"version":3,"mappings":";;AACA,YAAYA,KAAZ,MAAuB,OAAvB;AACA,SAASC,aAAT,EAAwBC,cAAxB,QAA8C,uBAA9C;AACA,SAASC,qBAAT,QAAsC,0BAAtC;AAyGS;;AA9DF,SAASC,kBAAT,CACLC,KADK,EAEsB;EAC3B,MAAMC,cAAcJ,eAAeG,MAAME,MAArB,CAApB;EACA,MAAMC,MAAYR,aAAuB,IAAvB,CAAlB;EACA,MAAM;IACJS,cADI;IAEJC,QAFI;IAGJC,aAHI;IAIJC,UAJI;IAKJC,UALI;IAMJC;EANI,IAOFT,KAPJ;EAQA,MAAM,CAACU,QAAD,IAAmBf,eACvB,IAAIG,qBAAJ,CAA0B;IACxBI,QAAQD,WADgB;IAExBU,aAAa,aAFW;IAGxBC,SAAS,GAHe;IAIxBhB,aAJwB;IAKxBQ,cALwB;IAMxBC,QANwB;IAOxBC,aAPwB;IAQxBC,UARwB;IASxBC,UATwB;IAUxBC;EAVwB,CAA1B,CADuB,CAAzB;EAeMd,gBAAU,MAAM;IACpBe,SAASG,SAAT,CAAmBZ,WAAnB;EACF,CAFM,EAEH,CAACA,WAAD,EAAcS,QAAd,CAFG;EAIAf,gBAAU,MAAM;IACpB,IAAIS,cAAJ,EAAoB;MAClBM,SAASI,iBAAT,CAA2BV,cAA3B;IACF;EACF,CAJM,EAIH,CAACA,cAAD,EAAiBM,QAAjB,CAJG;EAMAf,gBAAU,MAAM;IACpB,IAAIU,QAAJ,EAAc;MACZK,SAASK,WAAT,CAAqBV,QAArB;IACF;EACF,CAJM,EAIH,CAACA,QAAD,EAAWK,QAAX,CAJG;EAMAf,gBAAU,MAAM;IACpBe,SAASM,gBAAT,CAA0BV,iBAAiB,KAA3C;EACF,CAFM,EAEH,CAACA,aAAD,EAAgBI,QAAhB,CAFG;EAIAf,gBAAU,MAAM;IACpBe,SAASO,aAAT,CAAuBV,cAAc,EAArC;EACF,CAFM,EAEH,CAACA,UAAD,EAAaG,QAAb,CAFG;EAIAf,gBAAU,MAAM;IACpB,IAAIQ,IAAIe,OAAR,EAAiB;MACfR,SAASS,KAAT,CAAehB,IAAIe,OAAnB;IACF;;IAEA,OAAO,MAAM;MACXR,SAASU,OAAT;IACF,CAFA;EAGF,CARM,EAQH,CAACV,QAAD,CARG;EAUN,OAAO,mBAAC,KAAD,EAAC;IAAIW,KAAI,KAAR;IAAcC,WAAU,uBAAxB;IAAgDnB;EAAhD,CAAD,CAAP;AACF","names":["React","onlineManager","useQueryClient","TanstackQueryDevtools","ReactQueryDevtools","props","queryClient","client","ref","buttonPosition","position","initialIsOpen","errorTypes","styleNonce","shadowDOMTarget","devtools","queryFlavor","version","setClient","setButtonPosition","setPosition","setInitialIsOpen","setErrorTypes","current","mount","unmount","dir","className"],"sources":["C:\\Users\\MOON\\Downloads\\Starter Template\\client\\node_modules\\@tanstack\\react-query-devtools\\src\\ReactQueryDevtools.tsx"],"sourcesContent":["'use client'\nimport * as React from 'react'\nimport { onlineManager, useQueryClient } from '@tanstack/react-query'\nimport { TanstackQueryDevtools } from '@tanstack/query-devtools'\nimport type {\n  DevtoolsButtonPosition,\n  DevtoolsErrorType,\n  DevtoolsPosition,\n} from '@tanstack/query-devtools'\nimport type { QueryClient } from '@tanstack/react-query'\n\nexport interface DevtoolsOptions {\n  /**\n   * Set this true if you want the dev tools to default to being open\n   */\n  initialIsOpen?: boolean\n  /**\n   * The position of the React Query logo to open and close the devtools panel.\n   * 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right'\n   * Defaults to 'bottom-right'.\n   */\n  buttonPosition?: DevtoolsButtonPosition\n  /**\n   * The position of the React Query devtools panel.\n   * 'top' | 'bottom' | 'left' | 'right'\n   * Defaults to 'bottom'.\n   */\n  position?: DevtoolsPosition\n  /**\n   * Custom instance of QueryClient\n   */\n  client?: QueryClient\n  /**\n   * Use this so you can define custom errors that can be shown in the devtools.\n   */\n  errorTypes?: Array<DevtoolsErrorType>\n  /**\n   * Use this to pass a nonce to the style tag that is added to the document head. This is useful if you are using a Content Security Policy (CSP) nonce to allow inline styles.\n   */\n  styleNonce?: string\n  /**\n   * Use this so you can attach the devtool's styles to specific element in the DOM.\n   */\n  shadowDOMTarget?: ShadowRoot\n}\n\nexport function ReactQueryDevtools(\n  props: DevtoolsOptions,\n): React.ReactElement | null {\n  const queryClient = useQueryClient(props.client)\n  const ref = React.useRef<HTMLDivElement>(null)\n  const {\n    buttonPosition,\n    position,\n    initialIsOpen,\n    errorTypes,\n    styleNonce,\n    shadowDOMTarget,\n  } = props\n  const [devtools] = React.useState(\n    new TanstackQueryDevtools({\n      client: queryClient,\n      queryFlavor: 'React Query',\n      version: '5',\n      onlineManager,\n      buttonPosition,\n      position,\n      initialIsOpen,\n      errorTypes,\n      styleNonce,\n      shadowDOMTarget,\n    }),\n  )\n\n  React.useEffect(() => {\n    devtools.setClient(queryClient)\n  }, [queryClient, devtools])\n\n  React.useEffect(() => {\n    if (buttonPosition) {\n      devtools.setButtonPosition(buttonPosition)\n    }\n  }, [buttonPosition, devtools])\n\n  React.useEffect(() => {\n    if (position) {\n      devtools.setPosition(position)\n    }\n  }, [position, devtools])\n\n  React.useEffect(() => {\n    devtools.setInitialIsOpen(initialIsOpen || false)\n  }, [initialIsOpen, devtools])\n\n  React.useEffect(() => {\n    devtools.setErrorTypes(errorTypes || [])\n  }, [errorTypes, devtools])\n\n  React.useEffect(() => {\n    if (ref.current) {\n      devtools.mount(ref.current)\n    }\n\n    return () => {\n      devtools.unmount()\n    }\n  }, [devtools])\n\n  return <div dir=\"ltr\" className=\"tsqd-parent-container\" ref={ref}></div>\n}\n"]},"metadata":{},"sourceType":"module"}